package Src {	import flash.display.MovieClip;	import flash.events.KeyboardEvent;	import flash.events.Event;	import flash.geom.Point;	import Src.com.freeactionscript.effects.explosion.Particle;	import Src.com.freeactionscript.effects.explosion.SmallExplosion;	import Src.com.freeactionscript.effects.explosion.MediumExplosion;	import Src.com.freeactionscript.effects.explosion.LargeExplosion;	import Src.com.freeactionscript.effects.explosion.AbstractExplosion;	import flash.media.Sound;	import flash.net.URLRequest;	import flash.media.SoundChannel;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.utils.Timer;	import flashx.textLayout.formats.BlockProgression;	import flash.display3D.IndexBuffer3D;	import flash.text.TextField;    import flash.text.TextFieldType;	import flash.text.TextFormat;		public class Main extends MovieClip	{		private var _timer:Timer;		private var _Boss:Boss = new Boss;		private var Go:int = 0;		private var _nextLVL:int = 1;		private var traps:Array = new Array;		private var _trap1:MovieClip = new fireTrap;		private var _spawnTimer:Timer;		private var _enemyTimer:Timer;		private var AantalTrees:int;		private var _Spawn:Spawn = new Spawn;		private var _Door:Doors = new Doors;		private var gameOver:MovieClip = new GameOver;		private var _smallExplosion:SmallExplosion;		private var _mediumExplosion:MediumExplosion;		private var _largeExplosion:LargeExplosion;		public var tree:MovieClip = new Trees;		private var Omgeving:Array;		private var Omgeving2:Array = new Array;		private var obstacles:Array;		private var _Spawns:Array = new Array;		private var collision1:MovieClip = new Collision1;		private var collision2:MovieClip = new Collision2;		private var collision3:MovieClip = new Collision3;		private var collision4:MovieClip = new Collision4;		public var GroupTrees:Array = new Array;		private var player:Player;		public var _hitSound:Sound = new Sound();		public var _soundchnl1:SoundChannel = new SoundChannel();		private var block:Array = new Array;		private var block1:MovieClip = new Block1;		private var block2:MovieClip = new Block2;		private var block3:MovieClip = new Block3;		private var block4:MovieClip = new Block4;		private var bullets:Array;		private var colArray:Array;		private var enemies:Array;		private var enemyBullets:Array;		private var colOnObj:Array = new Array;		private var horCode:int;		private var verCode:int = 0;		private var _eOffField:int = 0;		private var _bulletCount:int = 20;		private var Sb = new btn_Start;		private var Tt = new btn_Tut;		private var Te = new Title;		private var Ib = new infoBar;		private var Hb = new health_Bar;		private var startGame:int = 0;		private var S2 = new Skill2;		private var S3 = new Skill3;		private var Gn = new Gun;		private var N1 = new Nu1;		private var N2 = new Nu2;		private var N3 = new Nu3;		private var Hu = new healthpowerUp;		private var Ht:Timer;		private var canHeal:Boolean = true;		private var Pt:Timer;		private var dubbleP:Boolean = true;		var maxHP:int = 100;		var currentHP:int = maxHP;		var percentHP:Number = currentHP / maxHP;		private var Hx:int = 0;		private var Hy:int = 0;		private var Hyt:Timer;		private var Hyp:int = 0;		private var label1:TextField = createCustomTextField(500, 200, 200, 200);		private var ammo:MovieClip = new Ammo;		private var winner:int = 0;		public function Main() 		{			addChild(Sb);			Sb.x = 500;			Sb.y = 430;			addChild(Tt);			Tt.x = 500;			Tt.y = 600;			addChild(Te);			Te.x = 488;			Te.y = 100;						Sb.addEventListener(MouseEvent.CLICK,clicked);			stage.addEventListener(KeyboardEvent.KEY_DOWN,pressed);			stage.addEventListener(KeyboardEvent.KEY_UP,released);						Ht = new Timer(10000,1);			Ht.addEventListener(TimerEvent.TIMER, healthHandler, false, 0,true);			Pt = new Timer(20000,1);			Pt.addEventListener(TimerEvent.TIMER, dubblePower, false, 0,true);			Hyt = new Timer(5000,1);			Hyt.addEventListener(TimerEvent.TIMER, dubblepowerT, false, 0,true);						S2.stop();			S3.stop();					}		public function clicked(e:MouseEvent):void		{			bullets = new Array();			player = new Player();			enemies = new Array();			colArray = new Array();			obstacles = new Array();			Omgeving = new Array();			enemyBullets = new Array();			Omgeving2.push(ammo);			for (var col:int = 0; col<2;col++)			{				var colObject:MovieClip = new Collision1;				colArray.push(colObject);				Omgeving.push(colObject);				colOnObj.push(colObject);				addChild(colArray[col]);			}						addChild(collision2);			collision2.x = 550;			collision2.y = 700;			collision3.x = 550;			collision3.y = 1000;			addChild(collision3);			addChild(_Door);						_smallExplosion = new SmallExplosion(this);			_mediumExplosion = new MediumExplosion(this);			_largeExplosion = new LargeExplosion(this);							for (var S:int = 0; S<2; S++)			{				if(S==1)				{					S++;				}								var LeftSpawn = new Spawn;				var RightSpawn = new Spawn;				_Spawns.push(LeftSpawn);				_Spawns.push(RightSpawn);				var _LeftY:int = 50;				var _RightY:int = 50;				if(S == 2)				{					_LeftY = 500;					_RightY = 500;				}								_Spawns[S].x = 100;				_Spawns[S].y = _LeftY;				_Spawns[S+1].x = 850;				_Spawns[S+1].y = _RightY;				Omgeving.push(_Spawns[S]);				colOnObj.push(_Spawns[S]);				colOnObj.push(_Spawns[S+1]);				Omgeving.push(_Spawns[S+1]);				addChild(_Spawns[S]);				addChild(_Spawns[S+1]);			} 			AantalTrees = 10;			for (var B2:int = 0; B2<AantalTrees;B2++)			{				GroupTrees.push(new Trees2);				colOnObj.push(GroupTrees[B2].Links);				colOnObj.push(GroupTrees[B2].Rechts);				Omgeving.push(GroupTrees[B2]);				GroupTrees[B2].x = 450;				var tree_Y:int = -600;									if(B2 >= 1)				{					tree_Y =+-600 * B2;				}									GroupTrees[B2].y = tree_Y;				addChild(GroupTrees[B2]);			}													Omgeving.push(collision2);			colOnObj.push(collision2);			Omgeving.push(collision4);			colOnObj.push(collision4);			Omgeving.push(_Door);			colOnObj.push(_Door);			colOnObj.push(_Spawn);			Omgeving.push(_Spawn);			colOnObj.push(collision3);							colArray[0].y = 350;			colArray[1].x = 1050;			colArray[1].y = 350;			player.x=500;			player.y=350;			block.push(block1);			block.push(block2);			block.push(block3);			block.push(block4);						for(var blk:int = 0; blk<block.length;blk++)			{				if(blk == 0)				{					var xas:int = 200;					var yas:int = 100;				}									if(blk == 1 || blk == 3)				{					xas = 530;				}									if(blk == 2)				{					xas = 200;					yas = 430;				}								block[blk].x = xas;				block[blk].life = 10;				block[blk].y = yas;				Omgeving.push(block[blk]);				colOnObj.push(block[blk]);				obstacles.push(block[blk]);								addChild(block[blk]);			}							addChild(player);			Omgeving.push(tree);			addChild(tree);			tree.x = 450;			tree.y = 400;			_timer = new Timer(500);			_enemyTimer = new Timer(1000);			_enemyTimer.start();			_timer.start(); 				var reqhit:URLRequest = new URLRequest('Explosion.mp3');			_hitSound.load(reqhit);			_enemyTimer.addEventListener(TimerEvent.TIMER, spawnsEnemy);			stage.addEventListener(MouseEvent.CLICK, shoots);			stage.addEventListener(KeyboardEvent.KEY_DOWN, keyPressed);			stage.addEventListener(KeyboardEvent.KEY_UP, keyReleased);			this.addEventListener(Event.ENTER_FRAME, gameloop);			removeChild(Sb);			removeChild(Tt);			removeChild(Te);									addChild(Ib);			Ib.y = 620;			addChild(Hb);			Hb.y = 660;			Hb.x = 234;			addChild(S2);			S2.y = 649;			S2.x = 470;						addChild(S3);			S3.y = 649;			S3.x = 570;			addChild(N1);			N1.y = 676;			N1.x = 465;			addChild(N2);			N2.y = 676;			N2.x = 565;			addChild(Gn);			Gn.x = 480;			Gn.y = 210;	}		public function createCustomTextField(x:Number, y:Number, width:Number, height:Number):TextField //Deze functie maakt een Textfield en zorgt ervoor dat je makkelijk aangeven kan wat de main eigenschappen zijn.		{			var result:TextField = new TextField(); 			result.x = x; result.y = y;			result.width = width; result.height = height;			addChild(result);			setChildIndex(result,0);			return result;		}		private function spawnsEnemy(e:TimerEvent)		{			var AantalEnemies = 4;			for (var i:int= 0;i<AantalEnemies;i++)			{				enemies.push(new Enemy());				addChild(enemies[i]);				setChildIndex(enemies[i],10);				Omgeving.push(enemies[i]);				colOnObj.push(enemies[i]);				enemies[i].x = _Spawns[i].x;				enemies[i].y = _Spawns[i].y;				enemies[i].addEventListener("shoot now", createBullet);				_enemyTimer.stop();			}		}		private function createBullet(e:Event)		{			var enemy:Enemy = e.target as Enemy;			var b:BulletsEnemy = new BulletsEnemy();			enemyBullets.push(b);			Omgeving.push(b);			b.x = enemy.x;			b.rotation = enemy.rotation;			b.y = enemy.y;			addChild(b);				}		private function createBulletBoss(e:Event)		{			var boss:Boss = e.target as Boss;			var b:BulletsEnemy = new BulletsEnemy();			var c:BulletsEnemy = new BulletsEnemy();			var d:BulletsEnemy = new BulletsEnemy();			var f:BulletsEnemy = new BulletsEnemy();			var g:BulletsEnemy = new BulletsEnemy();			enemyBullets.push(b);			Omgeving.push(b);			b.x = boss.x+3;			b.rotation = boss.rotation;			b.y = boss.y +100;			addChild(b);			enemyBullets.push(c);			Omgeving.push(c);			c.x = boss.x +47;			c.y = boss.y+70;			c.rotation = boss.rotation;			addChild(c);			enemyBullets.push(d);			Omgeving.push(d);			d.x = boss.x +146;			d.y = boss.y+70;			d.rotation = boss.rotation;			addChild(d);			enemyBullets.push(f);			Omgeving.push(f);			f.x = boss.x -43;			f.y = boss.y+70;			f.rotation = boss.rotation;			addChild(f);			enemyBullets.push(g);			Omgeving.push(g);			g.x = boss.x -143;			g.y = boss.y+70;			g.rotation = boss.rotation;			addChild(g);		}		private function shoots(e:MouseEvent):void		{			if(_bulletCount > 0)			{				var bul = new Bullets();				bullets.push(bul);				Omgeving.push(bul);				addChild(bullets[bullets.length - 1]);				bullets[bullets.length - 1].x = player.x;				bullets[bullets.length - 1].y = player.y;				bullets[bullets.length - 1].rotation = player.rotation;				_bulletCount --;			}		}				private function gameloop(e:Event):void		{			if(winner == 1)			{				horCode == 0;				verCode == 0;			}			if(_bulletCount == 1)			{				if(Go == 0)				{					ammo.x = GroupTrees[0].x+50;					ammo.y = GroupTrees[0].y+1000;				}				if(Go == 1)				{					ammo.y = GroupTrees[0].y-3500;				}				addChild(ammo);							}			_smallExplosion.update();			_mediumExplosion.update();			_largeExplosion.update();			_Boss.followTarget(new Point(player.x,player.y));			var my_fmt:TextFormat = new TextFormat();			my_fmt.color = 0xFF0000;			my_fmt.size = 30;			label1.defaultTextFormat = my_fmt;			label1.setSelection(6,15); 			label1.setSelection(6,23); 			var xscore = _bulletCount.toString();			label1.text = xscore;								for(var B:int = 0; B <AantalTrees;B++)				{					if (GroupTrees[B].y == 1200 && verCode == -1 && this.contains(GroupTrees[B]))					{						removeChild(GroupTrees[B]);					}				}						for each (var o:MovieClip in obstacles)			{				var block_Deleted:Boolean = false;				for each (var blt:Bullets in bullets)				{					for(var blk:int = 0; blk<block.length;blk++)					{						if(block[blk].hitTestPoint(blt.x, blt.y, true))						{							//leven van obstakel af							_largeExplosion.create(blt.x, blt.y)														_soundchnl1 = _hitSound.play();														block[blk].life --;							//kogel verwijderen																					if(block[blk].life <= 0)							{																if (this.contains(block[blk]))								{									removeChild(block[blk]);									obstacles.splice(obstacles.indexOf(block[blk]), 1);								}							}							if(this.contains(blt))							{								removeChild(blt);								bullets.splice(bullets.indexOf(blt),1);							}						}					}				}			}				for each(var ek:BulletsEnemy in enemyBullets)				{					for(var blk2:int = 0; blk2<block.length;blk2++)					{						if(block[blk2].hitTestPoint(ek.x, ek.y, true))						{							//leven van obstakel af							block[blk2].life --;							//kogel verwijderen							if(this.contains(ek))							{								removeChild(ek);								enemyBullets.splice(enemyBullets.indexOf(ek),1);							}							if(block[blk2].life <= 0)							{								if(this.contains(block[blk2]))								{									removeChild(block[blk2]);									obstacles.splice(obstacles.indexOf(block[blk2]),1);								}							}																											}					}										if(player.hitTestPoint(ek.x,ek.y, true))					{						currentHP -= 10;						_smallExplosion.create(player.x, player.y)						if(currentHP <= 0)						{							currentHP = 0;							removeChild(player);							gameOver.x = 500;							gameOver.y = 300;							addChild(gameOver);							_bulletCount = 0;							_eOffField = 4;						}						updateHealthBar();						removeChild(ek);						enemyBullets.splice(enemyBullets.indexOf(ek),1);					}				}								if(player.hitTestPoint(ammo.x,ammo.y, true) && this.contains(ammo))				{					_bulletCount = 20;					removeChild(ammo);				}			for(var colx:int = 0;colx<colOnObj.length;colx++)			{				if(verCode == -1 && colOnObj[colx].hitTestPoint(player.x,player.y-100, true))				{					verCode = 0;				}								if(verCode == 1 && colOnObj[colx].hitTestPoint(player.x,player.y+50, true))				{					verCode = 0;				}								if(horCode == -1 && colOnObj[colx].hitTestPoint(player.x-50,player.y, true))				{					horCode = 0;				}								if(horCode == 1 && colOnObj[colx].hitTestPoint(player.x+100,player.y, true))				{					horCode = 0;				}			}						if(verCode == -1 && collision3.y != 1000)			{				collision3.y += (-30*verCode);			}						if(verCode == 1)			{								collision3.y +=(-30*verCode);			}						for(var objectz:int = 0; objectz < Omgeving.length; objectz++)			{				if(verCode == -1)				{					Omgeving[objectz].y += (-30*verCode);				}								if(verCode == 1)				{					Omgeving[objectz].y += (-30*verCode);				}								if(horCode == 1)				{					Omgeving[objectz].x += (-30*horCode);				}								if(horCode == -1)				{					Omgeving[objectz].x += (-30*horCode);				}			}						for(var objectz2:int = 0; objectz2 < Omgeving2.length; objectz2++)			{				if(verCode == -1)				{					Omgeving2[objectz2].y += (-30*verCode);				}								if(verCode == 1)				{					Omgeving2[objectz2].y += (-30*verCode);				}								if(horCode == 1)				{					Omgeving2[objectz2].x += (-30*horCode);				}								if(horCode == -1)				{					Omgeving2[objectz2].x += (-30*horCode);				}			}						if(horCode == 0 && verCode == 0)			{				player.followTarget(new Point(mouseX,mouseY));			}			else			{				if(horCode == -1)				{					player.followTarget(new Point(player.x-30,player.y));				}								if(horCode == 1)				{					player.followTarget(new Point(player.x+30,player.y));				}								if(verCode == -1)				{					player.followTarget(new Point(player.x,player.y-30));				}								if(verCode == 1)				{					player.followTarget(new Point(player.x,player.y+30));				}			}						for (var i:int= 0;i<enemies.length;i++)			{				enemies[i].followTarget(new Point(player.x,player.y));			}			for (var k:int= 0; k < enemyBullets.length; k++)			{								enemyBullets[k].movement(30);			}							for (var j:int = bullets.length-1; j >= 0; j--  )			{				var splice:Boolean = false;				bullets[j].movement(30);																if(bullets[j].x < -100 || bullets[j].x > stage.stageWidth +100 || bullets[j].y < -100 || bullets[j].y > stage.stageHeight +100)								{					splice = true;								}				if(_Boss.hitTestPoint(bullets[j].x,bullets[j].y,true))				{					_soundchnl1 = _hitSound.play();					_largeExplosion.create(_Boss.x,_Boss.y)					_Boss.life --;					if(_Boss.life <= 0)					{						var won:MovieClip = new YouHaveWon;						won.x = 500;						won.y = 0;						addChild(won);						_Boss.destroy();						removeChild(_Boss);						winner = 1;					}				}								for each(var enemy:Enemy in enemies)				{					if(enemy.hitTestPoint(bullets[j].x,bullets[j].y, true))					{						if(Hyp == 0)						{							enemy.maxEHP -=10;						}												if(Hyp == 1)						{							enemy.maxEHP -=10						}						_soundchnl1 = _hitSound.play();						_largeExplosion.create(enemy.x, enemy.y)						splice = true;												if(enemy.maxEHP <= 0)						{							removeChild(enemy);							enemy.destroy();							_eOffField++;							enemies.splice(enemies.indexOf(enemy),1);							if(_eOffField == 4)							{								removeChild(_Door);								removeChild(_Spawns[0]);								removeChild(_Spawns[1]);								removeChild(_Spawns[2]);								removeChild(_Spawns[3]);								_nextLVL = 2;								_eOffField = 0;																for(var four:int = 0;four<= block.length-1;four++)								{									if(this.contains(block[four]))									{										removeChild(block[four]);									}								}							}						}					}				}				if(_nextLVL == 2)				{					Go = 1;					_Boss.x = GroupTrees[0].x+50;					_Boss.y = -4450;					Omgeving.push(_Boss);					colOnObj.push(_Boss);					addChild(_Boss);					_Boss.addEventListener("shoot now",createBulletBoss);					_nextLVL =1;										for (var blkx:int = 0;blkx<block.length;blkx++)					{						if(blkx == 0)						{							var xas:int = GroupTrees[0].x-200;							var yas:int = -4200;						}										if(blkx == 1 || blkx == 3)						{							xas = GroupTrees[0].x+130;						}												if(blkx == 2)						{							xas = GroupTrees[0].x-200;							yas = -3900;						}						block[blkx].x = xas ;												block[blkx].life = 10;						block[blkx].life = 100000;						block[blkx].y = yas;									addChild(block[blkx]);						setChildIndex(block[blkx],1);					}										for(var c:int = 0;c<5;c++)					{						traps.push(new fireTrap);						if(c == 0)						{							traps[c].x = GroupTrees[c].x +50;							traps[c].y = -300;						}						if(c == 1)						{							traps[c].x = GroupTrees[c].x +200;							traps[c].y = -820;						}						if(c == 2)						{							traps[c].x = GroupTrees[c].x +200;							traps[c].y = -1200;						}						if(c == 3)						{							traps[c].x =GroupTrees[c].x +50;							traps[c].y = -1700;						}						if(c == 4)						{							traps[c].x = GroupTrees[c].x + 250;							traps[c].y = -2200;						}						traps[c].height = 100;						traps[c].width = 200;												Omgeving.push(traps[c]);						addChild(traps[c]);						_Door.y = -4500;						addChild(_Door);					}				}												if(player.life <= 0)				{					removeChild(player);				}				if(splice)				{					removeChild(bullets[j]);					bullets.splice(j,1);				}			}			for each(var mc:MovieClip in traps)			{				for(var qt:int;qt<4;qt++)				{					if(this.contains(traps[qt]))					{						if(collision3.hitTestPoint(traps[qt].x,traps[qt].y,true))						{							removeChild(traps[qt]);						}					}											if(player.hitTestPoint(traps[qt].x,traps[qt].y, true))					{						removeChild(player);					}				}			}						}				private function updateHealthBar():void		{			percentHP = currentHP / maxHP;			Hb.BarColor.scaleX = percentHP;		}		private function Heal():void		{			if(canHeal)			{				S3.gotoAndStop(1);				Hx = 1;				currentHP = maxHP;				canHeal = false;				Ht.start();			}		}				private function healthHandler(e:TimerEvent):void		{			S3.gotoAndStop(1);			canHeal = true;		}		private function Power():void		{			if(dubbleP)			{				Hy = 1;				Hyp = 1;				dubbleP = false;				Pt.start();				Hyt.start();			}		}		private function dubblePower(e:TimerEvent):void		{			S2.gotoAndStop(1);			dubbleP = true;		}		private function dubblepowerT(e:TimerEvent):void		{			Hyp = 0;		}		private function keyPressed(e:KeyboardEvent):void		{			if(e.keyCode == 83)			{				horCode = -1;				//trace("left");			}						if(e.keyCode == 69)			{				verCode = -1;				//trace("up");			}						if(e.keyCode == 68)			{				verCode = 1;				//trace("down");			}						if(e.keyCode == 70)			{				horCode = 1;				//trace("right");			}		}				public function pressed(e:KeyboardEvent):void		{			if(e.keyCode == 49)			{				if(Hy == 1)				{					S2.gotoAndStop(3);				}								if(dubbleP == true)				{					Power();				}			}						if(e.keyCode == 50)			{				if(Hx == 1)				{					S3.gotoAndStop(3);				}								if(currentHP <= 100)				{					Heal();				}								updateHealthBar();			}		}		public function released(e:KeyboardEvent):void		{			if(e.keyCode == 49)			{				if(Hy == 1)				{					S2.gotoAndStop(3);				}			}						if(e.keyCode == 50)			{				if(Hx == 1)				{					Hx = 0;					S3.gotoAndStop(3);				}			}		}				private function keyReleased(e:KeyboardEvent):void		{			if(e.keyCode == 83)			{				horCode = 0;			}						if(e.keyCode == 69)			{				verCode = 0;			}						if(e.keyCode == 68)			{				verCode = 0;			}						if(e.keyCode == 70)			{				horCode = 0;			}		}			}	}